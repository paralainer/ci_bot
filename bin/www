#!/usr/bin/env node
//'use strict';
var debug = require('debug')('ci_bot:server');
var MongoClient = require('mongodb').MongoClient;
var botServer = require('../bots/botApp');
var storesRegistry = require('../db/storesInitializer');
var subscriptionsManager = require('../jenkins/subscriptions/subscriptionsManager');

// Connection URL
var url = 'mongodb://' + process.env.MONGO_USER + ':' + process.env.MONGO_PASS + '@ds013330.mlab.com:13330/ci_bot';
// Use connect method to connect to the Server
console.log('Connecting to MongoDB...');
MongoClient.connect(url, function (err, db) {
    if (err) {
        console.log('Error connecting to mongo db.' + err);
        //return;
    }

    initializeStores(db);
    startWebApp();
    var botServer = startBots();
    startSubscriptions(botServer);
});

function startSubscriptions(botServer) {
    subscriptionsManager.start(botServer, function () {
        console.log('All subscriptions started');
    });
}

function initializeStores(db) {
    storesRegistry.initStores(db);
}

function startBots() {
    botServer.start();
    return botServer;
}


function startWebApp(db) {

    var app = require('../web/app');
    var http = require('http');

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    console.log('Connected to MongoDB.');

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


